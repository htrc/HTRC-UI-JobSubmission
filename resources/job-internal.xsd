<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	xmlns:tns="http://www.globus.org/namespaces/2004/10/gram/job/description"
	targetNamespace="http://www.globus.org/namespaces/2004/10/gram/job/description">

	<xsd:element name="job" type="tns:JobDescriptionType" />

	<xsd:complexType name="JobDescriptionType">
		<xsd:sequence>
			<!-- user id -->
			<!-- Note, this field is filled by job submission interface after retrieving 
				user id from OAuth2 authentication service -->
			<xsd:element name="localUserId" type="xsd:string"
				minOccurs="1" maxOccurs="1" />

			<!-- command line -->
			<!-- For pig latin, it is the script name, for hadoop mapreduce, it is 
				the part after "hadoop jar" -->
			<xsd:element name="commandLine" type="xsd:string"
				minOccurs="1" maxOccurs="1" />

			<!-- job type -->
			<!-- currently only supports pig latin and hadoop mapreduce -->
			<xsd:element name="jobType" type="tns:JobTypeEnumeration"
				minOccurs="1" maxOccurs="1" />

			<!-- results need to be staged out -->
			<xsd:element name="fileStageOut" type="tns:TransferRequestType"
				minOccurs="1" maxOccurs="unbounded" />

			<!-- VM instance number -->
			<xsd:element name="VMCount" type="xsd:positiveInteger"
				default="1" minOccurs="0" maxOccurs="1" />

			<!-- estimated execution time, in format hh:mm:ss -->
			<xsd:element name="executionTime" type="xsd:time"
				minOccurs="0" maxOccurs="1" />

			<!-- begin of registry related fields -->

			<!-- Note, these field are generated by job submission interface behind 
				the scene, and sigiri daemon doesn't need to have prior knowledge on the 
				directory structure of registry. Sigiri daemon's code can keep stable even 
				if the internal structure of registry changes -->

			<!-- access token & refresh token -->
			<!-- this is required since sigiri daemon may need to present this token 
				to registry APIs when retrieving stuff from registry, the value of this field 
				is access token and refresh token, separated by a white space -->
			<xsd:element name="tokenPath" type="tns:TransferRequestType"
				minOccurs="1" maxOccurs="1" />

			<!-- For following four fields, srcType is "wso2_registry", destType is 
				"headnode" -->
			<!-- path/folder to job archive -->
			<xsd:element name="archive" type="tns:TransferRequestType"
				minOccurs="1" maxOccurs="1" />

			<!-- worksets -->
			<xsd:element name="worksets" type="tns:WorkSets"
				minOccurs="0" maxOccurs="1" />

			<!-- end of registry related fields -->
		</xsd:sequence>
	</xsd:complexType>

	<xsd:complexType name="WorkSets">
		<xsd:sequence>
			<xsd:element name="workset" type="tns:TransferRequestType"
				minOccurs="1" maxOccurs="unbounded" />
		</xsd:sequence>
	</xsd:complexType>

	<xsd:complexType name="TransferRequestType">
		<xsd:sequence>
			<xsd:element name="srcPath" type="xsd:string" minOccurs="1"
				maxOccurs="1" />
			<xsd:element name="srcType" type="tns:TransferType"
				minOccurs="1" maxOccurs="1" />
			<xsd:element name="destPath" type="xsd:string" minOccurs="1"
				maxOccurs="1" />
			<xsd:element name="destType" type="tns:TransferType"
				minOccurs="1" maxOccurs="1" />
		</xsd:sequence>
	</xsd:complexType>

	<xsd:simpleType name="TransferType">
		<xsd:restriction base="xsd:string">
			<!-- headnode on Sloan cloud -->
			<xsd:enumeration value="headnode" />

			<!-- HDFS on Sloan cloud -->
			<xsd:enumeration value="hdfs" />

			<!-- WSO2 registry -->
			<xsd:enumeration value="wso2_registry" />
			<!-- Can add other user data repositories such as Cassandra, MySQL as 
				needed -->
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:simpleType name="JobTypeEnumeration">
		<xsd:restriction base="xsd:string">
			<!-- Apache pig latin -->
			<xsd:enumeration value="pig" />

			<!-- Apache hadoop mapreduce -->
			<xsd:enumeration value="mapreduce" />
		</xsd:restriction>
	</xsd:simpleType>

</xsd:schema>